#!/usr/bin/env bash

# fail fast
set -e

# debug
# set -x

# parse and derive params
BUILD_DIR=$1
CACHE_DIR=$2
LP_DIR=`cd $(dirname $0); cd ..; pwd`

function error() {
  echo " !     $*" >&2
  exit 1
}

function topic() {
  echo "-----> $*"
}

function indent() {
  c='s/^/       /'
  case $(uname) in
    Darwin) sed -l "$c";;
    *)      sed -u "$c";;
  esac
}



echo "-----> Found a hello.txt"

# if hello.txt is empty, abort the build
if [ ! -s $1/hello.txt ]; then
  echo "hello.txt was empty" | indent
  exit 1
fi



# APT_CACHE_DIR="$CACHE_DIR/apt/cache"
# APT_STATE_DIR="$CACHE_DIR/apt/state"

# mkdir -p "$APT_CACHE_DIR/archives/partial"
# mkdir -p "$APT_STATE_DIR/lists/partial"

# APT_OPTIONS="-o debug::nolocking=true -o dir::cache=$APT_CACHE_DIR -o dir::state=$APT_STATE_DIR"
 
# topic "Updating apt caches"
# apt-get $APT_OPTIONS update | indent
# apt-get $APT_OPTIONS -y --force-yes -d install --reinstall guile-2.0 | indent

# mkdir -p $BUILD_DIR/.apt

# for DEB in $(ls -1r $APT_CACHE_DIR/archives/*.deb); do
#   topic "Installing $(basename $DEB)"
#   dpkg -x $DEB $BUILD_DIR/.apt/
# done

# topic "Writing profile script"
# mkdir -p $BUILD_DIR/.profile.d
# cat <<EOF >$BUILD_DIR/.profile.d/000_apt.sh
# export PATH="\$HOME/.apt/usr/bin:\$PATH"
# export LD_LIBRARY_PATH="\$HOME/.apt/usr/lib/x86_64-linux-gnu:\$HOME/.apt/usr/lib/i386-linux-gnu:\$HOME/.apt/usr/lib:\$LD_LIBRARY_PATH"
# export LIBRARY_PATH="\$HOME/.apt/usr/lib/x86_64-linux-gnu:\$HOME/.apt/usr/lib/i386-linux-gnu:\$HOME/.apt/usr/lib:\$LIBRARY_PATH"
# export INCLUDE_PATH="\$HOME/.apt/usr/include:\$INCLUDE_PATH"
# export CPATH="\$INCLUDE_PATH"
# export CPPPATH="\$INCLUDE_PATH"
# export PKG_CONFIG_PATH="\$HOME/.apt/usr/lib/x86_64-linux-gnu/pkgconfig:\$HOME/.apt/usr/lib/i386-linux-gnu/pkgconfig:\$HOME/.apt/usr/lib/pkgconfig:\$PKG_CONFIG_PATH"
# EOF

# export PATH="$BUILD_DIR/.apt/usr/bin:$PATH"
# export LD_LIBRARY_PATH="$BUILD_DIR/.apt/usr/lib/x86_64-linux-gnu:$BUILD_DIR/.apt/usr/lib/i386-linux-gnu:$BUILD_DIR/.apt/usr/lib:$LD_LIBRARY_PATH"
# export LIBRARY_PATH="$BUILD_DIR/.apt/usr/lib/x86_64-linux-gnu:$BUILD_DIR/.apt/usr/lib/i386-linux-gnu:$BUILD_DIR/.apt/usr/lib:$LIBRARY_PATH"
# export INCLUDE_PATH="$BUILD_DIR/.apt/usr/include:$INCLUDE_PATH"
# export CPATH="$INCLUDE_PATH"
# export CPPPATH="$INCLUDE_PATH"
# export PKG_CONFIG_PATH="$BUILD_DIR/.apt/usr/lib/x86_64-linux-gnu/pkgconfig:$BUILD_DIR/.apt/usr/lib/i386-linux-gnu/pkgconfig:$BUILD_DIR/.apt/usr/lib/pkgconfig:$PKG_CONFIG_PATH"

# #give environment to later buildpacks
# export | grep -E -e ' (PATH|LD_LIBRARY_PATH|LIBRARY_PATH|INCLUDE_PATH|CPATH|CPPPATH|PKG_CONFIG_PATH)='  > "$LP_DIR/export"

mkdir -p ~/.local

cd /tmp

curl -O ftp://ftp.gnu.org/gnu/libunistring/libunistring-0.9.3.tar.gz
tar zxf libunistring-0.9.3.tar.gz
cd libunistring-0.9.3
./configure --prefix=$HOME/.local
make
make install

cd ..

curl -O -L -J curl -O -L -J https://github.com/ivmai/libatomic_ops/files/991111/libatomic_ops-7.4.2.tar.gz
tar zxf libatomic_ops-7.4.2.tar.gz
cd libatomic_ops-7.4.2
./configure --prefix=$HOME/.local
make
make install

cd ..

curl -O -L -J https://github.com/ivmai/bdwgc/files/1005610/gc-7.4.2.tar.gz
tar zxf gc-7.4.2.tar.gz
cd gc-7.4.2
./configure --prefix=$HOME/.local
make
make install

cd ..

curl -O ftp://ftp.gnu.org/gnu/guile/guile-2.0.11.tar.gz
tar zxf guile-2.0.11.tar.gz
cd guile-2.0.11
./configure --prefix=$HOME/.local
make
make install

guile-2.0 --version
# find / -iname *guile* | indent
# ls -A /app/tmp/cache/apt/cache/archives/
# dpkg -i /app/tmp/cache/apt/cache/archives/libgc1c2_1%3a7.4.2-7.3ubuntu0.1_amd64.deb
# ls -A /usr/local/bin

# replace hello with goodbye in a new file
cat $1/hello.txt | sed -e "s/[Hh]ello/Goodbye/g" > $1/goodbye.txt
