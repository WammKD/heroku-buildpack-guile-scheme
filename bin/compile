#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir>

# fail fast
set -e

# debug
#set -ex

# parse and derive params
LP_DIR=`cd $(dirname $0); cd ..; pwd`
BUILD_DIR=$1
CACHE_DIR=$2
GMP_VERSION=6.1.2
GUILE_VERSION=2.2.6
LIBTOOL_VERSION=2.4.6

function indent() {
	c='s/^/       /'

	case $(uname) in
		Darwin)
			sed -l "$c"
			;;
		*)
			sed -u "$c"
			;;
	esac
}

function topic() {
	echo "-----> $*"
}



APT_CACHE_DIR="$CACHE_DIR/apt-guile/cache"
APT_STATE_DIR="$CACHE_DIR/apt-guile/state"
APT_SOURCELIST_DIR="$CACHE_DIR/apt-guile/sources"   # place custom sources.list here
APT_SOURCES="$APT_SOURCELIST_DIR/sources.list"
APT_VERSION=$(apt-get -v | awk 'NR == 1{ print $2 }')

BUILDS_CACHE_DIR="$CACHE_DIR/guile-builds"

# Store which STACK we are running on in the cache to bust the cache if it changes
if [ -f $CACHE_DIR/.apt/STACK ]; then
  CACHED_STACK=$(cat "$CACHE_DIR/.apt/STACK")
else
  CACHED_STACK=$STACK
fi

case "$APT_VERSION" in
	0* | 1.0*)
		APT_FORCE_YES="--force-yes"
		;;
	*)
    APT_FORCE_YES="--allow-downgrades --allow-remove-essential --allow-change-held-packages"
		;;
esac

if
	[[ $CACHED_STACK == $STACK ]]
then
	# STACK has not changed
	topic "Reusing cache"
else
	# STACK changed
	topic "Detected Stack changes, flushing cache"

	rm -rf $APT_CACHE_DIR
	rm -rf $BUILDS_CACHE_DIR
fi

APT_OPTIONS="-o debug::nolocking=true -o dir::cache=$APT_CACHE_DIR -o dir::state=$APT_STATE_DIR"
# Override the use of /etc/apt/sources.list (sourcelist) and /etc/apt/sources.list.d/* (sourceparts).
APT_OPTIONS="$APT_OPTIONS -o dir::etc::sourcelist=$APT_SOURCES -o dir::etc::sourceparts=/dev/null"



mkdir -p "$APT_CACHE_DIR/archives/partial"
mkdir -p "$APT_STATE_DIR/lists/partial"
mkdir -p "$APT_SOURCELIST_DIR"   # make dir for sources
cat "/etc/apt/sources.list" > "$APT_SOURCES"    # no cp here



topic "Updating apt caches"
apt-get $APT_OPTIONS update | indent
                                                              #Artanis
apt-get $APT_OPTIONS -y $APT_FORCE_YES -d install --reinstall libnss3  autoconf automake autopoint autotools-dev bsdmainutils build-essential debhelper dh-autoreconf dh-strip-nondeterminism dpkg-dev flex g++ g++-7 gettext gettext-base groff-base intltool-debian libarchive-zip-perl libc-dev-bin libc6-dev libdpkg-perl libffi-dev libfile-stripnondeterminism-perl libgc-dev libgc1c2 libncurses5-dev libpipeline1 libreadline-dev libsigsegv2 libstdc++-7-dev libtext-unidecode-perl libtimedate-perl libtinfo-dev libunistring-dev libxml-libxml-perl libxml-namespacesupport-perl libxml-sax-base-perl libxml-sax-perl linux-libc-dev m4 man-db pkg-config po-debconf tex-common texinfo | indent

mkdir -p $BUILD_DIR/.apt

for DEB in $(ls -1 $APT_CACHE_DIR/archives/*.deb); do
	topic "Installing $(basename $DEB)"

	dpkg -x $DEB $BUILD_DIR/.apt/
done



topic "Writing profile script"
mkdir -p $BUILD_DIR/.profile.d
cat <<EOF >$BUILD_DIR/.profile.d/000_apt.sh
export PATH="\$HOME/.apt/usr/bin:\$PATH"
export LD_LIBRARY_PATH="\$HOME/.apt/usr/lib/x86_64-linux-gnu:\$HOME/.apt/usr/lib/i386-linux-gnu:\$HOME/.apt/usr/lib:\$LD_LIBRARY_PATH"
export LIBRARY_PATH="\$HOME/.apt/usr/lib/x86_64-linux-gnu:\$HOME/.apt/usr/lib/i386-linux-gnu:\$HOME/.apt/usr/lib:\$LIBRARY_PATH"
export INCLUDE_PATH="\$HOME/.apt/usr/include:\$HOME/.apt/usr/include/x86_64-linux-gnu:\$INCLUDE_PATH"
export CPATH="\$INCLUDE_PATH"
export CPPPATH="\$INCLUDE_PATH"
export PKG_CONFIG_PATH="\$HOME/.apt/usr/lib/x86_64-linux-gnu/pkgconfig:\$HOME/.apt/usr/lib/i386-linux-gnu/pkgconfig:\$HOME/.apt/usr/lib/pkgconfig:\$PKG_CONFIG_PATH"
export GUILE_LOAD_PATH="\$HOME/.apt/usr/share/guile/2.2"
EOF

export PATH="$BUILD_DIR/.apt/usr/bin:$PATH"
export LD_LIBRARY_PATH="$BUILD_DIR/.apt/usr/lib/x86_64-linux-gnu:$BUILD_DIR/.apt/usr/lib/i386-linux-gnu:$BUILD_DIR/.apt/usr/lib:$LD_LIBRARY_PATH"
export LIBRARY_PATH="$BUILD_DIR/.apt/usr/lib/x86_64-linux-gnu:$BUILD_DIR/.apt/usr/lib/i386-linux-gnu:$BUILD_DIR/.apt/usr/lib:$LIBRARY_PATH"
export INCLUDE_PATH="$BUILD_DIR/.apt/usr/include:$BUILD_DIR/.apt/usr/include/x86_64-linux-gnu:$INCLUDE_PATH"
export CPATH="$INCLUDE_PATH"
export CPPPATH="$INCLUDE_PATH"
export PKG_CONFIG_PATH="$BUILD_DIR/.apt/usr/lib/x86_64-linux-gnu/pkgconfig:$BUILD_DIR/.apt/usr/lib/i386-linux-gnu/pkgconfig:$BUILD_DIR/.apt/usr/lib/pkgconfig:$PKG_CONFIG_PATH"
export GUILE_LOAD_PATH="$BUILD_DIR/.apt/usr/share/guile/2.2"

#give environment to later buildpacks
export | grep -E -e ' (PATH|LD_LIBRARY_PATH|LIBRARY_PATH|INCLUDE_PATH|CPATH|CPPPATH|PKG_CONFIG_PATH|GUILE_LOAD_PATH)=' > "$LP_DIR/export"

topic "Rewrite package-config files"
find $BUILD_DIR/.apt -type f -ipath '*/pkgconfig/*.pc' | xargs --no-run-if-empty -n 1 sed -i -e 's!^prefix=\(.*\)$!prefix='"$BUILD_DIR"'/.apt\1!g'



cd /tmp

topic "Installing libtool"
wget -c ftp://ftp.gnu.org/gnu/libtool/libtool-$LIBTOOL_VERSION.tar.gz && \
	tar xvzf libtool-$LIBTOOL_VERSION.tar.gz                            && \
	rm -f libtool-$LIBTOOL_VERSION.tar.gz                               && \
	cd libtool-$LIBTOOL_VERSION                                         && \
	./configure --prefix=$BUILD_DIR/.apt/usr && make && make install && cd ..


topic "Installing GnuMP"
wget -c ftp://ftp.gnu.org/gnu/gmp/gmp-$GMP_VERSION.tar.xz && \
	tar xJf  gmp-$GMP_VERSION.tar.xz                        && \
	rm -f gmp-$GMP_VERSION.tar.xz                           && \
	cd gmp-$GMP_VERSION                                     && \
	./configure --prefix=$BUILD_DIR/.apt/usr && make && make install && cd ..


topic "Installing Guile"
wget -c ftp://ftp.gnu.org/gnu/guile/guile-$GUILE_VERSION.tar.gz             && \
	tar xvzf guile-$GUILE_VERSION.tar.gz                                      && \
	rm -f guile-$GUILE_VERSION.tar.gz                                         && \
	cd guile-$GUILE_VERSION                                                   && \
	./configure --prefix=$BUILD_DIR/.apt/usr && make && make install && cd ..


ln -s $BUILD_DIR/.apt/usr/include/guile/2.2/libguile   $BUILD_DIR/.apt/usr/include/libguile
ln -s $BUILD_DIR/.apt/usr/include/guile/2.2/libguile.h $BUILD_DIR/.apt/usr/include/libguile.h
